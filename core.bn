;;;; core.bn -- Documentation for Bone Lisp core operations.   -*- lisp -*-
;;;; Copyright (C) 2016 Wolfgang Jaehrling
;;;;
;;;; Permission to use, copy, modify, and/or distribute this software for any
;;;; purpose with or without fee is hereby granted, provided that the above
;;;; copyright notice and this permission notice appear in all copies.
;;;;
;;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
;;;; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
;;;; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
;;;; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
;;;; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
;;;; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
;;;; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

;;;; Note: This file just provides the docstrings for the operations
;;;; in the core.  You will not find any implementation here.  This
;;;; file should not be evaluated, it should only be parsed by a
;;;; documentation generator.  Besides `defsub`, this file uses
;;;; `defspecial` to document special forms and `defalias` for
;;;; alternative names of subs, as well as `defsection` to define the
;;;; different sections.

;; TODO: We are at `copy` currently.

(defsection "Special forms"
  "Special forms are built-in forms with special evaluation rules."

  (defspecial (if test then else)
    "If `test` yields true, evaluate `then`, otherwise `else`.

The only value that does not count as true is `\f`, the booolean false
value.  This means that the empty list as well as the number zero are
considered to be true values.  See `nil?` and `zero?` if you want to
check for those values.")

  (defspecial (quote . obj)
    "Returns `obj`, unevaluated.")

  (defspecial (lambda args . body)
    "Create an anonymous sub with arguments `args` and code `body`.

`args` can be either a `sym` or a list of `sym`s; if it is a list, it
may be improper, but only if it has a `sym` as rest.  This means:

* `(lambda x ...)` will bind the list of arguments to `x`.
* `(lambda (a b) ...)` will find two arguments to `a` and `b`, respectively.
* `(lambda (a b . x) ...)` will bind two arguments to `a` and `b`,
  as well as all remaining arguments to `x`.

`body` is a list of expressions, which will be evaluated in order.

The anonymous sub that is created will be lexically scoped,
i.e. bindings defined in an outer scope may be used and are
encapsulated if the sub is passed back as a return value.")

);end of section
(defsection "General utilities"
  "This section defines basic operations on all objects."

  (defsub (id x)
    "This is the identity sub; it simply returns `x`.

This is sometimes useful in higher order programming.")

  (defsub (eq? a b)
    "Returns whether `a` and `b` are the same object.

Don't use this for comparing numbers, use `=?` instead.  The most
important use of `eq?` is as a quick way to compare `sym`s.")

  (defsub (copy x)
    "Return a newly allocated copy of `x`.")

  (defsub (not x)
    "Boolean negation: Return whether `x` is false.

Do not confuse this with `no` or `nil?`, which test for the empty list.")

);end of section
(defsection "Subroutines (`sub`s)"
  "A `sub` is created with the special form `lambda`."

  (defsub (sub? x)
    "Return whether `x` is a sub.")

  (defsub (apply sub . args)
    "Apply `sub` to the given arguments, the last value in `args` must be a list.

The exact behaviour is best explained with examples:
* `(apply f)` is `(f)`
* `(apply f '(1 2 3))` is `(f 1 2 3)`
* `(apply f 1 2 '(3 4))` is `(f 1 2 3 4)`

This allows to use a list as the arguments to a sub, while also having
fixed arguments at the same time (without a need for consing them to
the front of the list manually).  See also `list*`.")

);end of section
(defsection "Cons Cells and Lists"
  "A `cons` is the building block of a list: It consists of the first
element in the `car` field and the remaining list after the first
element in the `cdr` field.  The names are Lisp tradition."

  (defsub (cons a d)
    "Create a cons cell containing `a` as car and `d` as cdr.")

  (defsub (car x)
    "Return the car (first element) of the cons cell `x`.

Note that `car` and `cdr` are low-level operations which usually
should not appear in application code.  Instead, higher-level list
operations should be used (which may be implemented in terms of `car`
and `cdr`).")

  (defsub (cdr x)
    "Return the cdr (second element) of the cons cell `x`.

See `car` for additional usage information.")

  (defsub (cons? x)
    "Return whether `x` is a `cons` cell.")

  (defalias no nil?)
  (defsub (nil? x)
    "Return whether `x` is the empty list.

This is the same as `no`, but `no` often reads more naturally, as in:

    (if (no xs) ... ...)")

  (defsub (list? x)
    "Return whether `x` is a list (i.e. either a `cons` or nil).")

  (defsub (list . xs)
    "Returns `xs`.

This is a basic list constructor; it's more convenient (and faster)
than nested `cons` calls.")

  (defalias cons* list*)
  (defsub (list* . xs)
    "Create a list consisting of the elements of `xs`, but using the last element as rest.

This means that `(list* 1 2 3)` returns `(1 2 . 3)`.")

  (defalias length len)
  (defalias size len)
  (defsub (len xs)
    "Return the number of elements in `xs`.")

  (defsub (cat list1 list2)
    "Concatenate `list1` and `list2`.")

  (defsub (each sub xs)
    "Apply `sub` to every element of the list `xs` in sequence.

The result should be ignored, but will be the result of the last call to `sub`.")

);end of section
(defsection "Association Lists (`alists`)"
  "An `alist` is an 'association list': Each of it elements is a cons
cell with a key in its `car` and a corresponding value in the
`cdr` (sometimes also the `cadr` - this is useful if you want to
distinguish between a value being `#f` and no value being found)."

  (defsub (assoq? x alist)
    "Get the value corresponding to the key `x` in `alist` (`#f` if not found).

This sub will return the `cdr` where the `car` is `x`.")

  (defsub (assoq-cons? x alist)
    "Returns the key/value entry from `alist` with the key `x` (`#f` if not found).")

);end of section
(defsection "Numbers"
  "Currently, only Fixnums (integers of limited range) are supported."

  (defsub (num? x)
    "Return whether `x` is a number.")

  (defsub (+ . nums)
    "Return the sum of the numbers in `nums` (which may not contain anything but numbers).")

  (defsub (- n . nums)
    "Arithmetic minus (unary or n-ary).

When `nums` is empty, `-n` will be returned.  Otherwise, the sum of
`nums` will be subtracted from `n` and the result gets returned.

This is the traditional behaviour of `-` in Lisp, which allows
both `(- x)` and `(- a b c)` to work as one would expect normally.
However, this has one problem you have to be careful about: When you
do

    (apply - num xs)

the result will be `-num` if `xs` is empty (instead of `num`, as is
probably intended).  For the desired behaviour, you can use:

    (- num (apply + xs))")

  (defsub (* . nums)
    "Return the product of the numbers in `nums` (which may not contain anything but numbers).

When applied to the empty list (as in `(*)` or `(apply * ())`), the result is 1.")

  (defsub (/ dividend . divisors)
    "Devide the `dividend` by the product of all `divisors`.")

  (defsub (=? a b)
    "Return whether the numbers `a` and `b` are equal.")

  (defsub (<>? a b)
    "Return whether the numbers `a` and `b` are different.")

  (defsub (>? a b)
    "Return whether the number `a` is greater than `b`.")

  (defsub (<? a b)
    "Return whether the number `a` is less than `b`.")

  (defsub (>=? a b)
    "Return whether the number `a` is greater than or equal to `b`.")

  (defsub (<=? a b)
    "Return whether the number `a` is less than or equal to`b`.")

);end of section
(defsection "Strings (`str`s)"
  "A `str` is a sequence of characters representing a text.  A
character may either be an integer specifying an UCS code points, or a
list of UCS code points which represents a longer grapheme cluster (a
'user-perceived character' that may be combined from several code
points).  A grapheme cluster always starts with a base code point,
followed by zero or more continuing code points.")

  (defsub (str? x)
    "Return whether `x` is a string (a `str`).")

  (defalias list->str str)
  (defsub (str chrs)
    "Return a new `str` with the characters from the list `chrs`.")

  (defalias str->list unstr)
  (defsub (unstr s)
    "Return the list of characters in `s`.")

(defsub (str=? s1 s2)
  "Return whether `str1` and `str2` consist of the same characters.")

(defsub (str<>? s1 s2)
  "Return whether `str1` and `str2` consist of different characters.")

);end of section
(defsection "Input/Output"
  "Currently, the I/O facilities are rather limited."

  (defsub (print x)
    "Print `x` as an extended symbolic expression.

This will print the object so that it can be read by humans and also
read back by the Lisp reader, except if it contains objects which
cannot be read back, like regions or `sub`s.  Reading back is possible
as long as it only contains lists, `sym`s, numbers and bools.  The
abbreviations for `quote`, `quasiquote`, `unquote`, `unquote-splicing`
and `lambda` will be printed to keep the output short and as
human-readable as possible.")

  (defsub (say . xs)
    "Print all `xs`.

The differences to the `print` sub are:
* A `str` is printed without the quote signs and without escape sequences.
* A list is printed by applying it to `say`.
* All other objects are printed as with `print`.")

);end of section
(defsection "Symbols (`sym`s)"
  "A `sym` is similar to a `str`, but only a single `sym` object
exists for each text.  This means that `sym`s can be effectively
compared for equality with `eq?`."

  (defsub (sym? x)
    "Return whether `x` is a sym.")

  (defalias str->sym intern)
  (defsub (intern s)
    "Return the `sym` with the text of `str`.

If it does not exist yet, it will be created.")

);end of section
