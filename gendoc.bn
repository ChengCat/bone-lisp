#!/usr/bin/env bone
;;;; gendoc.bn -- Documentation generator for Bone Lisp.   -*- bone -*-
;;;; Copyright (C) 2016 Wolfgang Jaehrling
;;;;
;;;; Permission to use, copy, modify, and/or distribute this software for any
;;;; purpose with or without fee is hereby granted, provided that the above
;;;; copyright notice and this permission notice appear in all copies.
;;;;
;;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
;;;; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
;;;; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
;;;; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
;;;; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
;;;; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
;;;; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

(mysub (document type spec docstr)
  (say "### " type ": `")
  (print spec)
  (say "`\n\n" docstr "\n\n"))

(mysub (look-at-expr x)
  (with head (car? x)
    (awhen (cond ((eq? head 'defsub) 'sub)
		 ((eq? head 'defmac) 'mac)
		 ((eq? head 'defreader) 'reader))
      (document it (nth 1 x) (nth 2 x)))))

(mysub (each-expr sub)
  (with loop (lambda (next)
	       (when (not (eof? next))
		 (sub next)
		 (loop (read))))
    (loop (read))))

(mysub (document-file fname)
  (in-reg
   (with-file-dst (str+ fname ".md")
     (say "# " fname "\n\n")
     (with-file-src fname
       (each-expr look-at-expr)))
   ()))

(each (drop 2 *program-args*)
      document-file)
