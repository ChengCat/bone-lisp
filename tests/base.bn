;;;; tests/base.bn -- Base language tests.   -*- bone -*-
;;;; Copyright (C) 2016 Wolfgang Jaehrling
;;;;
;;;; Permission to use, copy, modify, and/or distribute this software for any
;;;; purpose with or without fee is hereby granted, provided that the above
;;;; copyright notice and this permission notice appear in all copies.
;;;;
;;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
;;;; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
;;;; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
;;;; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
;;;; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
;;;; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
;;;; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

(use std/tap)

(test-plan "tests/base.bn")

(test "`(do)` doesn't change last_value."   ; we expect that behaviour in `or`
  (eq? (do () (do)) ()))

(test "nested `with`"
  (eq? 3 (with x 1 (with y 2 (+ x y))))
  (eq? 2 (with x 1 (with x 2 x))))

(test "quasiquote"
  (eq? 3 ``,,(+ 1 2)))

(test "equal?"
  (equal? '(1 a "foo") (list 1 'a "foo"))
  (equal? '(((1 . 2) 3 4 . 5) 6 (7 . (8 9)))
          '(((1 . 2) 3 4 . 5) 6 (7 8 9))))

(test "if"
  (if #t #t #f)
  (if #f #f #t)
  (not (if #f #t))
  (if #f #f #f #t))

(test-error "invalid `if`"
  (if)
  (if #t))

(test "closures"
  ((lambda (a) (not a)) #f)
  (| x (nil? x) ())
  (str=? "test"
         ((with x "test"
            (in-reg (lambda () x))))))

(test "eval"
  (eval #t)
  (eval '(eq? (+ 1 2) 3)))

(test "copy"
  (equal? '(1 x (3) 4) (copy '(1 x (3) 4)))
  (str=? "test" (copy "test")))

(test "apply"
  (=? 10 (apply + (list 1 2 3 4)))
  (0? (apply - 10 1 '(2 3 4)))
  (0? (apply + ())))

(test "list*"
  (equal? (list* 1 2 3) '(1 2 . 3))
  (eq? (list*) ()))

(test "reverse"
  (equal? (reverse '(1 2 (3))) '((3) 2 1))
  (eq? (reverse ()) ()))

(test "member"
  (member? 'x '(a b c x y))
  (not (member? 'x ())))

(test "`cat` with 2 args"
  (nil? (cat () ()))
  (equal? (cat '(1) ()) '(1))
  (equal? (cat () '(2)) '(2)))

(test "`cat` with 3 args"
  (nil? (cat () () ()))
  (equal? '(1 2) (cat '(1) () '(2))))

(test "len"
  (0? (len ()))
  (=? (len '(1 2)) 2))

(test "map"
  (equal? (map ++ '(0 1)) '(1 2))
  (with x 10
    (equal? (map | n (+ x n) '(1 2))
            '(11 12))))

(test "filter"
  (nil? (filter >0? '(0 -2)))
  (equal? (filter >0? '(1 -2 3 -5 6))
          '(1 3 6))
  (nil? (filter | x (err "oops") ())))

(test "sort"
  (equal? (sort <? '(4 2 5 3 0 1))
          '(5 4 3 2 1 0)))

(test "destructure"
  (equal? (destructure (a b c) (list 1 2 3) (list c b a))
          '(3 2 1)))

(test "integer range -2^59..2^59-1"
  (>? 2147483648 2147483647)
  (>? 576460752303423487 576460752303423486)
  (=? 576460752303423487 (+ 576460752303423487 0))
  (<? -576460752303423488 -576460752303423487)
  (=? -576460752303423488 (+ -576460752303423488 0)))

(test-error "integer out of range"
  (++ 576460752303423487)
  (-- -576460752303423488))

(test "num->str"
  (str=? "0" (num->str 0))
  (str=? "576460752303423487" (num->str 576460752303423487))
  (str=? "-576460752303423488" (num->str -576460752303423488))
  (str=? "0.1" (num->str 0.1))
  (str=? "-999.99" (num->str -999.99)))

(test "num?"
  (eq? #t (num? 123))
  (eq? #t (num? 0.1))
  (eq? #f (num? "str"))
  (eq? #f (num? ())))

(test "int?"
  (eq? #t (int? 123))
  (eq? #f (int? 0.1))
  (eq? #f (int? "str"))
  (eq? #f (int? ())))

(test "float?"
  (eq? #f (float? 123))
  (eq? #t (float? 0.1))
  (eq? #f (float? "str"))
  (eq? #f (float? ())))

(test "+"
  (=? 0 (+))
  (=? 4 (+ 4))
  (=? 10 (+ 4 6))
  (=? 10 (+ 1 2 3 4))
  (=? 9.5 (+ 4 5.5))
  (=? 9.5 (+ 1 2 3 3.5))
  (=? 16.0 (+ 1 2.5 3 4.5 5))
  (=? 576460752303423487 (+ 576460752303423485 1 1))
  (int? (+ 5 4))
  (int? (+ 1 2 3 4))
  (float? (+ 5.5 4.5))
  (float? (+ 1 2 3 3.5)))

(test "-"
  (=? 4 (- 4))
  (=? 6 (- 10 4))
  (=? 4 (- 10 1 2 3))
  (=? 4.5 (- 10 5.5))
  (=? 3.5 (- 10 1 2 3.5))
  (=? -6.0 (- 10 1 2.5 3 4.5 5))
  (=? 576460752303423485 (- 576460752303423487 1 1)))

(test "*"
  (=? 1 (*))
  (=? 4 (* 4))
  (=? 24 (* 4 6))
  (=? 24 (* 1 2 3 4))
  (=? 22.0 (* 4 5.5))
  (=? 52.5 (* 3 5 3.5))
  (=? 656.25 (* 3 5 3.5 5 2.5))
  (=? 288230376151711744 (* 72057594037927936 2 2))
  (int? (* 5 4))
  (int? (* 1 2 3 4))
  (float? (* 5.5 4.5))
  (float? (* 1 2 3 3.5)))

(test "/"
  (=? 4 (/ 20 5))
  (=? 4.0 (/ 20 5.0))
  (=? 4 (/ 21 5))
  (=? 4.2 (/ 21 5.0))
  (=? 5 (/ 30 2 3))
  (=? 5.0 (/ 30 2.0 3))
  (=? 5 (/ 31 2 3))
  (=? 5.5 (/ 33 2.0 3))
  (=? 72057594037927936 (/ 288230376151711744 2 2)))

(test-error "`/` by zero"
  (/ 3 0)
  (/ 3 0.0)
  (/ 10 2 0 5)
  (/ 10 2 0.0 5))

(test "=?"
  (eq? #t (=? 1 1))
  (eq? #t (=? 1 1.0))
  (eq? #t (=? 1.5 1.5))
  (eq? #t (=? 1 1 1 1))
  (eq? #t (=? 1 1 1.0 1))
  (eq? #f (=? 2 1))
  (eq? #f (=? 2 1.0))
  (eq? #f (=? 1 1 2 1))
  (eq? #f (=? 1 1 2.0 1)))

(test "<>?"
  (eq? #t (<>? 2 1))
  (eq? #t (<>? 2 1.0)))
  (eq? #f (<>? 1 1))
  (eq? #f (<>? 1 1.0))
  (eq? #f (<>? 1.5 1.5))


(test ">?"
  (eq? #t (>? 2 1))
  (eq? #t (>? 2 1.0))
  (eq? #t (>? 4 3.0 2 1.0))
  (eq? #f (>? 1 1))
  (eq? #f (>? 1 2))
  (eq? #f (>? 1 2.0))
  (eq? #f (>? 4 3.0 2 2.5)))

(test "<?"
  (eq? #t (<? 1 2))
  (eq? #t (<? 1 2.0))
  (eq? #t (<? 1 2.0 3 4.0))
  (eq? #f (<? 1 1))
  (eq? #f (<? 2 1))
  (eq? #f (<? 2 1.0))
  (eq? #f (<? 1 2.0 3 2.5)))

(test ">=?"
  (eq? #t (>=? 1 1))
  (eq? #t (>=? 2 1))
  (eq? #t (>=? 2 1.0))
  (eq? #t (>=? 4 3.0 2 1.0))
  (eq? #f (>=? 1 2))
  (eq? #f (>=? 1 2.0))
  (eq? #f (>=? 4 3.0 2 2.5)))

(test "<=?"
  (eq? #t (<=? 1 1))
  (eq? #t (<=? 1 2))
  (eq? #t (<=? 1 2.0))
  (eq? #t (<=? 1 2.0 3 4.0))
  (eq? #f (<=? 2 1))
  (eq? #f (<=? 2 1.0))
  (eq? #f (<=? 1 2.0 3 2.5)))

(test "UTF-8 I/O"
  (str=? "胨" (str '(33000)))
  (eq? #chr"ß" 223))

(test "case"
  (eq? #f (case 'y ((a b c) 'abc)))
  (eq? 'xyz (case 'y ((a b c) 'abc) ((x y z) 'xyz)))
  (eq? 'other (case 'e ((a b c) 'abc) ((x y z) 'xyz) (#t 'other))))

(test "assoc?"
  (eq? (car (assoc? 'e '((a b) (c d) (e f)))) 'f)
  (not (assoc? 'e '((a b) (c d)))))

(test "assoc-entry?"
  (eq? (car (assoc-entry? 'e '((a b) (c d) (e f)))) 'e)
  (not (assoc-entry? 'e '((a b) (c d)))))

(test "mod"
  (=? (mod 11 2) 1))

(test ">? <? >=? <=?"
  (>? -2 -3)
  (>? 1 0 -1)
  (<? -3 -2)
  (<? -1 0 1)
  (>=? -2 -2)
  (>=? -2 -3)
  (>=? 1 0 -1)
  (>=? 1 1 -1)
  (<=? -2 -2)
  (<=? -3 -2)
  (<=? -1 0 1)
  (<=? -1 1 1))

(test "bit operations"
  (=? (bit-and 6 3) 2)
  (=? (bit-and (bit-not 3) 7) 4)
  (=? (bit-or 3 4) 7)
  (=? (bit-xor 7 4) 3))

(test "str basics"
  (str? (str '(65)))
  (cons? (unstr "abc"))
  (nil? (unstr ""))
  (str=? "foo" "foo")
  (not (str=? "f" "foo"))
  (not (str=? "foo" "f"))
  (str<>? "f" "foo")
  (str<>? "foo" "f")
  (not (str<>? "foo" "foo"))
  (=? 1 (str-len "a"))
  (str-empty? "")
  (str-empty? (str+))
  (str=? "foobar" (str+ "foo" "bar"))
  (str=? "foobar" (str+ "fo" "ob" "ar"))
  (str=? "foo" (str+ "foo"))
  (=? #chr "f" (str-nth 0 "foo")))

(test "sym interning"
  (str=? "abc" (sym->str (intern "abc"))))

(test "acond"
  (=? -2 (acond ((str-pos? "ob" "foobar") (- 0 it))))
  (0? (acond ((not #f) 0) ("abc" (str+ it "xyz"))))
  (str=? "abcxyz" (acond ((not #t) 0) ("abc" (str+ it "xyz"))))
  (not (acond (#f #t) (#f #t)))
  (not (acond)))

(test "str-select"
  (str=? "de" (str-select 3 5 "abcdefghi")))

(test "str*"
  (str=? "foofoofoo" (str* 3 "foo"))
  (str-empty? (str* 0 "foo")))

(test "`str-pad` and str-padr"
  (str=? " foobar" (str-pad 7 "foobar"))
  (str=? "foobar" (str-pad 6 "foobar"))
  (str=? "foobar" (str-pad 3 "foobar"))
  (str=? "foobar " (str-padr 7 "foobar"))
  (str=? "foobar" (str-padr 6 "foobar"))
  (str=? "foobar" (str-padr 3 "foobar")))

(test "str-ascii-lower"
  (str=? (str-ascii-lower "FooBÄR_Q12.Png")
         "foobÄr_q12.png"))

(test-error "`defsub` does not allow empty body or missing docstring"
  (defsub (foo) "oops")
  (defsub (bar) #t #t))

(test "round"
  (=? 3 (round 3.1))
  (=? 3 (round 2.9))
  (=? 3 (round 3))
  (=? -3 (round -3.1))
  (=? -3 (round -2.9))
  (=? -3 (round -3))
  (int? (round 3.1)))

(test "ceil"
  (=? 4 (ceil 3.1))
  (=? 3 (ceil 2.9))
  (=? 3 (ceil 3))
  (=? -3 (ceil -3.1))
  (=? -2 (ceil -2.9))
  (=? -3 (ceil -3))
  (int? (ceil 3.1)))

(test "floor"
  (=? 3 (floor 3.1))
  (=? 2 (floor 2.9))
  (=? 3 (floor 3))
  (=? -4 (floor -3.1))
  (=? -3 (floor -2.9))
  (=? -3 (floor -3))
  (int? (floor 3.1)))

(test "trunc"
  (=? 3 (trunc 3.1))
  (=? 2 (trunc 2.9))
  (=? 3 (trunc 3))
  (=? -3 (trunc -3.1))
  (=? -2 (trunc -2.9))
  (=? -3 (trunc -3))
  (int? (trunc 3.1)))

(test "int->float"
  (=? 3 (int->float 3))
  (float? (int->float 3)))
