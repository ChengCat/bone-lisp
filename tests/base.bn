;;;; tests/base.bn -- Base language tests.   -*- bone -*-
;;;; Copyright (C) 2016 Wolfgang Jaehrling
;;;;
;;;; Permission to use, copy, modify, and/or distribute this software for any
;;;; purpose with or without fee is hereby granted, provided that the above
;;;; copyright notice and this permission notice appear in all copies.
;;;;
;;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
;;;; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
;;;; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
;;;; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
;;;; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
;;;; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
;;;; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

(use std/tap)

(test-plan "tests/base.bn")

(test "`(do)` doesn't change last_value."   ; we expect that behaviour in `or`
  (eq? (do () (do)) ()))

(test "nested `with`"
  (eq? 3 (with x 1 (with y 2 (+ x y))))
  (eq? 2 (with x 1 (with x 2 x))))

(test "quasiquote"
  (eq? 3 ``,,(+ 1 2)))

(test "`/` with 2 operands"
  (eq? 4 (/ 20 5))
  (eq? 4 (/ 21 5)))

(test "`/` with more than 2 operands"
  (eq? 5 (/ 30 2 3))
  (eq? 5 (/ 31 2 3)))

(test-error "`/` by zero"
  (/ 3 0)
  (/ 10 2 0 5))

(test "equal?"
  (equal? '(1 a "foo") (list 1 'a "foo"))
  (equal? '(((1 . 2) 3 4 . 5) 6 (7 . (8 9)))
          '(((1 . 2) 3 4 . 5) 6 (7 8 9))))

(test "if"
  (if #t #t #f)
  (if #f #f #t))

(test-error "invalid `if`"
  (if)
  (if #t)
  (if #t #f)
  (if #f #f #f #f)) ; FIXME

(test "closures"
  ((lambda (a) (not a)) #f)
  (| x (nil? x) ())
  (str=? "test"
         ((with x "test"
            (in-reg (lambda () x))))))

(test "eval"
  (eval #t)
  (eval '(eq? (+ 1 2) 3)))

(test "copy"
  (equal? '(1 x (3) 4) (copy '(1 x (3) 4)))
  (str=? "test" (copy "test")))

(test "apply"
  (=? 10 (apply + (list 1 2 3 4)))
  (0? (apply - 10 1 '(2 3 4)))
  (0? (apply + ())))

(test "list*"
  (equal? (list* 1 2 3) '(1 2 . 3))
  (eq? (list*) ()))

(test "reverse"
  (equal? (reverse '(1 2 (3))) '((3) 2 1))
  (eq? (reverse ()) ()))

(test "member"
  (member? 'x '(a b c x y))
  (not (member? 'x ())))

(test "`cat` with 2 args"
  (nil? (cat () ()))
  (equal? (cat '(1) ()) '(1))
  (equal? (cat () '(2)) '(2)))

(test "`cat` with 3 args"
  (nil? (cat () () ()))
  (equal? '(1 2) (cat '(1) () '(2))))

(test "len"
  (0? (len ()))
  (=? (len '(1 2)) 2))

(test "map"
  (equal? (map ++ '(0 1)) '(1 2))
  (with x 10
    (equal? (map | n (+ x n) '(1 2))
            '(11 12))))

(test "filter"
  (nil? (filter >0? '(0 -2)))
  (equal? (filter >0? '(1 -2 3 -5 6))
          '(1 3 6))
  (nil? (filter | x (err "oops") ())))

(test "sort"
  (equal? (sort <? '(4 2 5 3 0 1))
          '(5 4 3 2 1 0)))

(test "destructure"
  (equal? (destructure (a b c) (list 1 2 3) (list c b a))
          '(3 2 1)))

(test "integer range -2^59..2^59-1"
  (>? 2147483648 2147483647)
  (>? 576460752303423487 576460752303423486)
  (=? 576460752303423487 (+ 576460752303423487 0))
  (<? -576460752303423488 -576460752303423487)
  (=? -576460752303423488 (+ -576460752303423488 0)))

(test "num->str"
  (str=? "0" (num->str 0))
  (str=? "576460752303423487" (num->str 576460752303423487))
  (str=? "-576460752303423488" (num->str -576460752303423488)))
