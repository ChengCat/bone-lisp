;;;; tests/prog-arg.bn -- Program argument parser tests.   -*- bone -*-
;;;; Copyright (C) 2016 Wolfgang Jaehrling
;;;;
;;;; Permission to use, copy, modify, and/or distribute this software for any
;;;; purpose with or without fee is hereby granted, provided that the above
;;;; copyright notice and this permission notice appear in all copies.
;;;;
;;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
;;;; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
;;;; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
;;;; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
;;;; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
;;;; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
;;;; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

(use std/tap
     std/prog-arg)

(test-plan "tests/prog-arg.bn")

(mysub (test-options opts)
  (parse-prog-args opts
                   '((verbose ((flag #t)
                               (desc "Display more information.")
                               (short #chr "v")))
                     (output ((flag #f)
                              (desc "Write output to ARG.")
                              (short #chr "o")))
                     (retry-on-error ((flag #t)
                                      (desc "Don't give up.")
                                      (short #chr "r")))
                     (version ((flag #t)
                               (desc "Display version info")))
                     (help ((flag #t)
                            (desc "Show this message.")
                            (short #chr "h"))))))

(test "short options"
  (equal? (test-options '("-v" "-r" "-o" "foo" "bar"))
          '(((help #f) (version #f) (verbose #t) (retry-on-error #t) (output "foo")) ("bar"))))

(test "short options combination"
  (equal? (test-options '("-vr" "bar" "-o" "foo"))
          '(((help #f) (version #f) (retry-on-error #t) (verbose #t) (output "foo")) ("bar"))))

(test "short options with direct argument (no '=')"
  (equal? (test-options '("-vr" "-ofoo" "bar"))
          '(((help #f) (version #f) (retry-on-error #t) (verbose #t) (output "foo")) ("bar"))))

(test "short options with direct argument (with '=')"
  (equal? (test-options '("-vr" "-o=foo" "bar"))
          '(((help #f) (version #f) (retry-on-error #t) (verbose #t) (output "foo")) ("bar"))))

(test "long options"
  (equal? (test-options '("--verbose" "-r" "--output" "foo" "bar"))
          '(((help #f) (version #f) (verbose #t) (retry-on-error #t) (output "foo")) ("bar"))))

(test "long options with direct argument"
  (equal? (test-options '("--verbose" "-r" "--output=foo" "bar"))
          '(((help #f) (version #f) (verbose #t) (retry-on-error #t) (output "foo")) ("bar"))))

(test "long options abbreviated"
  (equal? (test-options '("--verb" "--retry" "--out=foo" "bar"))
          '(((help #f) (version #f) (verbose #t) (retry-on-error #t) (output "foo")) ("bar"))))

(test-error "option without argument (middle)"
  (test-options '("--output" "--verbose" "foo" "bar")))

(test-error "option without argument (end)"
  (test-options '("--verbose" "bar" "--output")))

(test-error "flag with argument"
  (test-options '("--verbose=yes" "--output" "foo" "bar")))

(test-error "ambigous abbreviation"
  (test-options '("--ver")))

(test-error "unknown option"
  (test-options '("--xyz")))
