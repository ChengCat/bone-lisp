;;;; std/prog-arg.bn -- Standard program argument parsing library.   -*- bone -*-
;;;; Copyright (C) 2016 Wolfgang Jaehrling
;;;;
;;;; Permission to use, copy, modify, and/or distribute this software for any
;;;; purpose with or without fee is hereby granted, provided that the above
;;;; copyright notice and this permission notice appear in all copies.
;;;;
;;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
;;;; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
;;;; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
;;;; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
;;;; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
;;;; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
;;;; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

;; Example:
;;  (parse-prog-args '("-v" "-o" "foo" "bar")
;;                   "FILE"
;;                   '((verbose ((flag #t)
;;                               (desc "Display more information.")
;;                               (short #chr "v")))
;;                     (output ((flag #f)
;;                              (desc "Write output to ARG.")
;;                              (short #chr "o")))
;;                     (retry-on-error ((flag #t)
;;                                      (desc "Don't give up.")
;;                                      (short #chr "r")))
;;                     (version (flag #t)
;;                              (desc "Display version info"))
;;                     (help ((flag #t)
;;                            (desc "Show this message.")
;;                            (short #chr "h")))))
;;
;; allowed input variants:
;;   -v -o foo bar
;;   -v -o=foo bar
;;   -v -ofoo bar
;;   -vr -o foo bar              ; combine multiple flags
;;   --verbose --output foo bar
;;   --verbose --output=foo bar
;;   --verb --out=foo bar        ; un-ambigous abbreviations
;;
;; return value:
;;   (((verbose #t) (output "foo") (retry-on-error #f)
;;     (help #f) (version #f))                  ; list of options and their values
;;    ("bar"))                                  ; list of non-options

(use std/alist)

(mysub (_option? arg)
  (and (str-prefix? "-" arg)
       (>? (str-len arg) 1)))

(mysub (_long-option? arg)
  (and (str-prefix? "--" arg)
       (>? (str-len arg) 2)))

;; Return the option-arg (or #f)
(mysub (_option-arg? arg)
  (aif (str-pos? "=" arg)
      (str-drop (++ it) arg)))

(mysub (_flag? sym opt-spec)
  (aif (assocar? sym opt-spec)
      (assocar? 'flag it)))

(mysub (_extract-long-option arg opt-spec)
  (with given (aif (str-pos? "=" arg)
                  (str-select 2 it arg)
                (str-drop 2 arg))
    (if (assoc? given opt-spec)
        (intern given)
      (with matches (fold (lambda (new so-far)
                            (if (str-prefix? given (sym->str new))
                                (cons new so-far)
                              so-far))
                          ()
                          (map car opt-spec))
        (case (len matches)
          ((0) (err "Unknown option: --" (intern given)))
          ((1) (car matches))
          (#t (err "Ambigous option abbreviation: --" (intern given))))))))

(mysub (_short->long char opt-spec)
  (aif (car? (find? | opt (eq? char (assocar? 'short (cadr opt)))
                    opt-spec))
      it
    (err "Option unknown: -" (str (list char)))))

(mysub (_parse-prog-args args options-spec)
  (with loop
      (lambda (remain options-result non-options-result)
        (cond ((nil? remain)
               (list (simplify-alist options-result)
                     (reverse non-options-result)))
              ((not (_option? (car remain)))
               (loop (cdr remain)
                     options-result
                     (cons (car remain) non-options-result)))
              ((_long-option? (car remain))
               (with option (_extract-long-option (car remain) options-spec)
                 (if (_flag? option options-spec)
                     (if (_option-arg? (car remain))
                          (err "Option takes no argument: --" option)
                       (loop (cdr remain)
                             (acons option #t options-result)
                             non-options-result))
                   (aif (_option-arg? (car remain))
                       (loop (cdr remain)
                             (acons option it options-result)
                             non-options-result)
                     (if (or (not (cons? (cdr remain)))
                             (_option? (cadr remain)))
                         (err "Option requires an argument: --" option)
                       (loop (cddr remain)
                             (acons option (cadr remain) options-result)
                             non-options-result))))))
              (#t ; short options
               (with option (_short->long (str-nth 1 (car remain))
                                          options-spec)
                 (if (_flag? option options-spec)
                     (loop (cdr remain)
                           (cat (map (lambda (c)
                                       (with option (_short->long c options-spec)
                                         (if (not (_flag? option options-spec))
                                             (err "Option needs an argument: --" option)
                                           (list option #t))))
                                     (drop 1 (unstr (car remain))))
                                options-result)
                           non-options-result)
                   (if (=? (str-len (car remain)) 2)
                       (if (or (not (cons? (cdr remain)))
                               (_option? (cadr remain)))
                           (err "Option requires an argument: --" option)
                         (loop (cddr remain)
                               (acons option (cadr remain) options-result)
                               non-options-result))
                     (loop (cdr remain)
                           (acons option
                                  (str-drop (if (=? #chr "=" (str-nth 2 (car remain))) 3 2)
                                            (car remain))
                                  options-result)
                               non-options-result)))))))
    (loop args
          (map | option-spec (list (car option-spec) #f)
               options-spec)
          ())))

(defsub (parse-prog-args args options-spec)
  "Parse `args` according to `options-spec`; `non-options` is a str for the help output."
  (in-reg (_parse-prog-args args options-spec)))

(defsub (say-prog-args-help name options-spec non-options-spec)
  "Display help output according to the given spec."
  (say "Usage: " name " [OPTIONS] " non-options-spec "\n\n")
  (each (lambda (option)
          (with short (assocar? 'short (cadr option))
            (if short (say "  -" (str (list short)) ", "))
            (say (str* (if short 0 6) " ")
                 "--"
                 (str-padr 12 (str+ (sym->str (car option))
                                    (if (assocar? 'flag (cadr option)) "" "=ARG")))
                 "  "
                 (aif (assocar? 'desc (cadr option)) it "")
                 "\n")))
        options-spec))
