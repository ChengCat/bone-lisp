;;;; std/log.bn -- Standard logging library.   -*- bone -*-
;;;; Copyright (C) 2016 Wolfgang Jaehrling
;;;;
;;;; Permission to use, copy, modify, and/or distribute this software for any
;;;; purpose with or without fee is hereby granted, provided that the above
;;;; copyright notice and this permission notice appear in all copies.
;;;;
;;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
;;;; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
;;;; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
;;;; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
;;;; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
;;;; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
;;;; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

(defvar _*log-dst* *stderr*)

(defmac (with-log file . body)
  "Evaluate `body` while writing log entries to `file`."
  (with-gensyms (backup)
    `(with ,backup *dst*
       (with-file-dst ,file
         (with-var _*log-dst* *dst*
           (with-var *dst* ,backup   ; restore
             ,@body))))))

(mysub (_log-timestamp)
  (when (lisp-info 'posix)
    (say (sys.time?) " "))) ; FIXME: print it readable

(defsub (log . data)
  "The last value in `data` will be logged with `print`, the others with `say`.

Returns the last value."
  (let ((val (last data))
        (msg (drop-right 1 data)))
    (with-var *dst* _*log-dst*
      (_log-timestamp)
      (say msg ": ")
      (print val)
      (say "\n"))
    val))
