;;;; std/math.bn -- Standard math library.   -*- bone -*-
;;;; Copyright (C) 2016 Wolfgang Jaehrling
;;;;
;;;; Permission to use, copy, modify, and/or distribute this software for any
;;;; purpose with or without fee is hereby granted, provided that the above
;;;; copyright notice and this permission notice appear in all copies.
;;;;
;;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
;;;; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
;;;; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
;;;; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
;;;; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
;;;; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
;;;; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

(defsub (percent perc n)
  "Return `perc` percent of `n`."
  (/ (* 100 n) (/ 10000 perc)))

(defsub (max . xs)
  "Return the maximum numeric value in `xs` (which may not be empty)."
  (fold (lambda (x so-far)
          (if (>? x so-far) x so-far))
        (car xs)
        (cdr xs)))

(defsub (min . xs)
  "Return the minimum numeric value in `xs` (which may not be empty)."
  (fold (lambda (x so-far)
          (if (<? x so-far) x so-far))
        (car xs)
        (cdr xs)))

(defsub (sum xs)
  "The sum of all values in `xs`."
  (apply + xs))

(defsub (abs n)
  "Absolute numerical value of `n`."
  (if (<0? n) (- 0 n) n))

(defsub (difference a b)
  "Return the (positive) difference between numbers `a` and `b`."
  (abs (- a b)))

(defsub (iota from to step)
  "Generate a list of numbers starting with `from`, ending with `to` and step size of `step`.

The step size `step` may be negative, in which case `to` needs to be lower than `from`."
  (unfold (lambda (n) ((if (>0? step) >? <?) n to))
          id
          (lambda (n) (+ n step))
          from))

(defsub (mean . xs)
  "Calculate the arithmetic mean of `xs`."
  (/ (sum xs) (len xs)))

(defsub (even? n)
  "Return whether `n` is an even number."
  (0? (mod n 2)))

(defsub (odd? n)
  "Return whether `n` is an odd number."
  (not (even? n)))
